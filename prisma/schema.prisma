generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model timeslot {
  id                  Int                     @id @default(autoincrement())
  start               DateTime                @db.Time()
  end                 DateTime                @db.Time()
  festival_day_id     Int
  volunteers_assigned volunteer_assignments[]
  festival_day        festival_day            @relation(fields: [festival_day_id], references: [id], onDelete: Cascade)
}

model volunteer {
  id          String                  @id @default(uuid()) @db.Uuid
  username    String                  @unique @db.VarChar(255)
  firstName   String                  @db.VarChar(255)
  lastName    String                  @db.VarChar(255)
  email       String                  @unique @db.VarChar(255)
  password    String                  @db.VarChar(255)
  isAdmin     Boolean                 @default(false)
  assignments volunteer_assignments[]
}

model zone {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(255)
  festival_id           String                  @db.Uuid
  nb_volunteers         Int                     @default(0)
  festival              festival                @relation(fields: [festival_id], references: [id], onDelete: Cascade)
  volunteer_assignments volunteer_assignments[]
}

model festival {
  id            String         @id @default(uuid()) @db.Uuid
  name          String         @db.VarChar(255)
  year          Int
  active        Boolean        @default(false)
  duration      Int
  festival_days festival_day[]
  zones         zone[]
}

model festival_day {
  id          Int        @id @default(autoincrement())
  festival_id String     @db.Uuid
  date        DateTime   @db.Date()
  open_at     DateTime   @db.Time()
  close_at    DateTime   @db.Time()
  festival    festival   @relation(fields: [festival_id], references: [id], onDelete: Cascade)
  timeslots   timeslot[]
}

model volunteer_assignments {
  volunteer_id String    @db.Uuid
  zone_id      Int
  timeslot_id  Int
  volunteer    volunteer @relation(fields: [volunteer_id], references: [id], onDelete: Cascade)
  zone         zone      @relation(fields: [zone_id], references: [id], onDelete: Cascade)
  timeslot     timeslot  @relation(fields: [timeslot_id], references: [id], onDelete: Cascade)

  @@id([volunteer_id, zone_id, timeslot_id])
}
